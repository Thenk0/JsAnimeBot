const {
    MessageEmbed,
    Message
} = require('discord.js');

class Embeds {

    static queue(queue) {
        const embed = new MessageEmbed()
            .setColor("#7F00FF")
            .setTitle('DJ Litminer')
            .setDescription('–û—á–µ—Ä–µ–¥—å –º—É–∑—ã–∫–∏ üéµüéµüéµ')
            .setTimestamp()
            .setFooter({
                text: "–û—á–µ—Ä–µ–¥—å –æ—Ç"
            });
        let dubInfo = "```ini\n";
        queue.forEach((song, i) => {
            dubInfo += `üéµ${i+1}): [${song.title}]\n`;
        });
        dubInfo += "```";
        embed.addField("–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å", dubInfo);
        return embed;
    }

    static foundtrack(trackinfo) {
        const embed = new MessageEmbed()
            .setColor("#48D1CC")
            .setTitle('DJ Litminer')
            .setDescription('–ù–∞–π–¥–µ–Ω —Ç—Ä–µ–∫ üéµüéµüéµ')
            .setImage(trackinfo.thumbnails[0].url)
            .setURL(trackinfo.url)
            .setTimestamp()
            .setFooter({
                text: "–ù–æ–≤—ã–π —Ç—Ä–µ–∫ –æ—Ç"
            });
        embed.addField("–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ", trackinfo.title);
        return embed;
    }

    static success(response, command) {
        let strresponse = "```css\n";
        strresponse += `${response}\n`;
        strresponse += "```";
        const embed = new MessageEmbed()
            .setColor("#00FF00")
            .setTitle("–£—Å–ø–µ—Ö")
            .addField(
                `–ö–æ–º–∞–Ω–¥–∞ _!${command}_ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`,
                strresponse
            );
        return embed;
    }

    static error(response, command) {
        let strresponse = "```css\n";
        strresponse += `${response}\n`;
        strresponse += "```";
        const embed = new MessageEmbed()
            .setColor("#FF0000")
            .setTitle("–û—à–∏–±–∫–∞")
            .addField(
                `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã _!${command}_`,
                strresponse
            );
        return embed;
    }

    static followList(follows) {
        const embed = new MessageEmbed()
            .setColor("#DC143C")
            .setTitle('–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫')
            .setDescription('–¢–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∞–Ω–∏–º–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∏—Ö')
            .setTimestamp()
            .setFooter({
                text: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥—Å–ø–∏—Å–∫–∞—Ö"
            });

        follows.forEach(follow => {
            let dubInfo = "```ini\n";
            dubInfo += `ID: ${follow.animeID}\n`;
            dubInfo += `–°–µ—Ä–∏–π: ${follow.currentEpisodes}/${follow.maxEpisodes == "0" ? "?" : follow.maxEpisodes}\n`;
            follow.dubs.forEach(dub => {
                const addQuotes = dub.episodes < follow.currentEpisodes;
                let episodeStr = `${dub.episodes} ${Embeds.episodeToString(dub.episodes)}`;
                if (addQuotes) episodeStr = `[${episodeStr}]`;
                dubInfo += `\t${dub.dubName}: ${episodeStr}\n`;
            });
            dubInfo += "```";
            embed.addField(follow.animeName, dubInfo);
        });
        return embed;
    }
    static getfollow(follow, guess = false) {
        const embed = new MessageEmbed()
            .setColor("#F11412")
            .setTitle('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ')
            .setDescription('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–π—Ç–ª–µ')
            .setImage(`https://shikimori.one${follow.animeImage}`)
            .setTimestamp()
            .setFooter({
                text: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–π—Ç–ª–µ"
            });

        let dubInfo = "```ini\n";
        dubInfo += `ID: ${follow.animeID}\n`;
        dubInfo += `–°–µ—Ä–∏–π: ${follow.currentEpisodes}/${follow.maxEpisodes == "0" ? "?" : follow.maxEpisodes}\n`;
        follow.dubs.forEach(dub => {
            const addQuotes = dub.episodes < follow.currentEpisodes;
            let episodeStr = `${dub.episodes} ${Embeds.episodeToString(dub.episodes)}`;
            if (addQuotes) episodeStr = `[${episodeStr}]`;
            dubInfo += `\t${dub.dubName}: ${episodeStr}\n`;
        });
        dubInfo += "```";
        embed.addField(follow.animeName, dubInfo);
        if (guess) {
            embed.setFooter({
                text: "–≠—Ç–æ –∞–Ω–∏–º–µ –±—ã–ª–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–æ.\nT.–∫ id –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫"
            })
        }
        return embed;
    }

    static list(animes) {
        let arrays = [];
        const size = 25;
        while (animes.length > 0) arrays.push(animes.splice(0, size));
        let embeds = [];
        arrays.forEach((array, i) => {
            const embed = new MessageEmbed()
                .setColor("#DC703C")
                .setTitle(`–°–ø–∏—Å–æ–∫ "–°–º–æ—Ç—Ä—é" –Ω–∞ —à–∏–∫–∏–º–æ—Ä–∏ ‚Ññ${i+1}`)
                .setDescription('–ê–Ω–∏–º–µ –≤ —Å–ø–∏—Å–∫–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∏—Ö')
                .setTimestamp()
                .setFooter({
                    text: "–°–ø–∏—Å–æ–∫ '–°–º–æ—Ç—Ä—é'"
                });

            array.forEach(anime => {
                let animeInfo = "```css\n";
                animeInfo += `ID: ${anime.animeID}\n`;
                animeInfo += `–ü–æ–¥–ø–∏—Å–∫–∞: ${anime.follow ? "–ï—Å—Ç—å" : "–ù–µ—Ç"}\n`;
                animeInfo += `–°–µ—Ä–∏–π: ${anime.currentEpisodes}/${anime.maxEpisodes == "0" ? "?" : anime.maxEpisodes}\n`;
                animeInfo += "```";
                embed.addField(anime.animeName, animeInfo);
            });
            embeds.push(embed);
        })
        return embeds;
    }

    static follow(animeObj) {
        const embed = new MessageEmbed()
            .setColor("#FF5F1F")
            .setTitle('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –Ω–∞ aniu')
            .setURL(`https://aniu.ru/anime/${animeObj.url}`)
            .setDescription(`–ù–∞–π–¥–µ–Ω–æ –∞–Ω–∏–º–µ: ${animeObj.title}`)
            .setFields({
                name: "–°—Å—ã–ª–∫–∏ –Ω–∞ –∞–Ω–∏–º–µ",
                value: `Aniu: https://aniu.ru/anime/${animeObj.url}\nShikimori: https://shikimori.one/animes/${animeObj.url}`,
            }, {
                name: "–ö–æ–º–∞–Ω–¥—ã",
                value: "```css\n" +
                    "[!confirm] - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞\n" +
                    "[!changeurl <URI>] - –°–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É\n" +
                    "[!abort] - –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É```"
            })
            .setImage(animeObj.img)
            .setTimestamp()
            .setFooter({
                text: "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –æ—Ç"
            });
        return embed;
    }
    static dubs(animeObj, dubs) {
        const embed = new MessageEmbed()
            .setColor("#FF5F1F")
            .setTitle(`–ê–Ω–∏–º–µ: ${animeObj.title}`)
            .setDescription(`–ù–∞–π–¥–µ–Ω–æ ${dubs.length} –æ–∑–≤—É—á–µ–∫`)
            .setFooter({
                text: "–û–∑–≤—É—á–∫–∏ —Ç–∞–π—Ç–ª–∞"
            });
        let dubString = "";
        dubs.forEach((dub, i) => {
            if (dub.isSubbed) {
                dubString += `\u276F ~~${i+1}) ${dub.dubName}: ${dub.episodes} ${Embeds.episodeToString(dub.episodes)}~~\n`
                return;
            }
            dubString += `**${i+1}) ${dub.dubName}: __${dub.episodes} ${Embeds.episodeToString(dub.episodes)}__**\n`
        });
        embed.addField(
            "–û–∑–≤—É—á–∫–∏",
            dubString
        );
        embed.addField(
            "–ö–æ–º–∞–Ω–¥—ã",
            "```css\n" +
            "[!confirm <N>] - –í—ã–±—Ä–∞—Ç—å –æ–∑–≤—É—á–∫—É\n" +
            "[!abort] - –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É```"
        );
        return embed;
    }
    static unfollowdubs(animeObj, dubs) {
        const embed = new MessageEmbed()
            .setColor("#E21F03")
            .setTitle(`–ê–Ω–∏–º–µ: ${animeObj.animeName}`)
            .setDescription(`–ù–∞–π–¥–µ–Ω–æ ${dubs.length} –æ–∑–≤—É—á–µ–∫`)
            .setFooter({
                text: "–û–∑–≤—É—á–∫–∏ —Ç–∞–π—Ç–ª–∞"
            });
        let dubString = `**0) –í—Å–µ: __${animeObj.currentEpisodes} ${Embeds.episodeToString(animeObj.currentEpisodes)}__**\n`;
        dubs.forEach((dub, i) => {
            dubString += `**${i+1}) ${dub.dubName}: __${dub.episodes} ${Embeds.episodeToString(dub.episodes)}__**\n`
        });
        embed.addField(
            "–û–∑–≤—É—á–∫–∏",
            dubString
        );
        embed.addField(
            "–ö–æ–º–∞–Ω–¥—ã",
            "```css\n" +
            "[!confirm <N>] - –í—ã–±—Ä–∞—Ç—å –æ–∑–≤—É—á–∫—É\n" +
            "[!abort] - –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É```"
        );
        return embed;
    }

    static episodeNotification(animeObj, dubObj) {
        const embed = new MessageEmbed()
            .setColor("#0047AB")
            .setTitle('–ù–æ–≤–∞—è —Å–µ—Ä–∏—è!')
            .setURL(`https://aniu.ru/anime/${animeObj.animeURL}`)
            .setDescription(animeObj.animeName)
            .setFields({
                name: "–°—Å—ã–ª–∫–∏ –Ω–∞ –∞–Ω–∏–º–µ",
                value: `Aniu: https://aniu.ru/anime/${animeObj.animeURL}\nShikimori: https://shikimori.one/animes/${animeObj.animeID}`,
            }, {
                name: dubObj.dubName,
                value: `${dubObj.newEpisodeNum}-—è —Å–µ—Ä–∏—è`
            })
            .setImage(`https://shikimori.one${animeObj.animeImage}`)
            .setTimestamp()
            .setFooter({
                text: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç"
            });

        return embed;
    }

    static newAnime(animeObj) {
        let titleName = animeObj.russian;
        if (titleName == "") {
            titleName = animeObj.name;
        }
        const embed = new MessageEmbed()
            .setColor("#54DEFD")
            .setTitle('–ù–æ–≤–æ–µ –∞–Ω–∏–º–µ –≤ —Å–ø–∏—Å–∫–µ!')
            .setURL(`https://shikimori.one${animeObj.url}`)
            .setDescription(titleName + `\nhttps://shikimori.one${animeObj.url}`)
            .setImage(`https://shikimori.one${animeObj.image.original}`)
            .setTimestamp()
            .setFooter({
                text: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç"
            });
        embed.addField(
            "ID",
            `${animeObj.id.toString()}`
        );
        embed.addField(
            "–°—Ç–∞—Ç—É—Å",
            animeObj.status
        );
        embed.addField(
            "–°–µ—Ä–∏–π",
            `${animeObj.episodes_aired}|${animeObj.episodes == "0" ? "?" : animeObj.episodes}`
        )
        return embed;
    }

    static episodeToString(episodes, uppercase = false) {
        episodes = episodes.toString();
        if (episodes.length > 1) {
            episodes = episodes.toString();
            episodes = episodes.slice(-2);
        }
        episodes = parseInt(episodes);
        const quo = Math.floor(episodes / 10);
        const rem = episodes % 10;
        if (quo != 1) {
            if (rem == 1) {
                return uppercase ? "–°–µ—Ä–∏—è" : "—Å–µ—Ä–∏—è";
            }
            if (rem > 0 && rem < 5) {
                return uppercase ? "–°–µ—Ä–∏–∏" : "—Å–µ—Ä–∏–∏";
            }
        }
        return uppercase ? "–°–µ—Ä–∏–π" : "—Å–µ—Ä–∏–π";
    }

    static formatedDate() {
        const date = new Date();
        return date.toLocaleString("ru-RU");
    }

    static formatedDateWithHourChange(hourAmount) {
        const oldDateObj = new Date();
        let newDateObj = new Date();
        newDateObj.setTime(oldDateObj.getTime() + (60 * 60 * 1000 * hourAmount));
        return newDateObj.toLocaleString("ru-RU");
    }
}

module.exports = Embeds;